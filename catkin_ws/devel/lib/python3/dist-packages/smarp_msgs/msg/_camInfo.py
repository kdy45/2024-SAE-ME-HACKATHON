# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from smarp_msgs/camInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class camInfo(genpy.Message):
  _md5sum = "f61d1f9a4644e3d0d34fa2980922d65a"
  _type = "smarp_msgs/camInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int16 stopline
int32 crop_image_width
int32 crop_image_height
float32 m_lx
float32 m_ly
float32 m_rx
float32 m_ry
int32[] m_point
string light_color
"""
  __slots__ = ['stopline','crop_image_width','crop_image_height','m_lx','m_ly','m_rx','m_ry','m_point','light_color']
  _slot_types = ['int16','int32','int32','float32','float32','float32','float32','int32[]','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stopline,crop_image_width,crop_image_height,m_lx,m_ly,m_rx,m_ry,m_point,light_color

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(camInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.stopline is None:
        self.stopline = 0
      if self.crop_image_width is None:
        self.crop_image_width = 0
      if self.crop_image_height is None:
        self.crop_image_height = 0
      if self.m_lx is None:
        self.m_lx = 0.
      if self.m_ly is None:
        self.m_ly = 0.
      if self.m_rx is None:
        self.m_rx = 0.
      if self.m_ry is None:
        self.m_ry = 0.
      if self.m_point is None:
        self.m_point = []
      if self.light_color is None:
        self.light_color = ''
    else:
      self.stopline = 0
      self.crop_image_width = 0
      self.crop_image_height = 0
      self.m_lx = 0.
      self.m_ly = 0.
      self.m_rx = 0.
      self.m_ry = 0.
      self.m_point = []
      self.light_color = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_h2i4f().pack(_x.stopline, _x.crop_image_width, _x.crop_image_height, _x.m_lx, _x.m_ly, _x.m_rx, _x.m_ry))
      length = len(self.m_point)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.m_point))
      _x = self.light_color
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.stopline, _x.crop_image_width, _x.crop_image_height, _x.m_lx, _x.m_ly, _x.m_rx, _x.m_ry,) = _get_struct_h2i4f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.m_point = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.light_color = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.light_color = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_h2i4f().pack(_x.stopline, _x.crop_image_width, _x.crop_image_height, _x.m_lx, _x.m_ly, _x.m_rx, _x.m_ry))
      length = len(self.m_point)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.m_point.tostring())
      _x = self.light_color
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.stopline, _x.crop_image_width, _x.crop_image_height, _x.m_lx, _x.m_ly, _x.m_rx, _x.m_ry,) = _get_struct_h2i4f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.m_point = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.light_color = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.light_color = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_h2i4f = None
def _get_struct_h2i4f():
    global _struct_h2i4f
    if _struct_h2i4f is None:
        _struct_h2i4f = struct.Struct("<h2i4f")
    return _struct_h2i4f
