// Generated by gencpp from file smarp_msgs/objectStatus.msg
// DO NOT EDIT!


#ifndef SMARP_MSGS_MESSAGE_OBJECTSTATUS_H
#define SMARP_MSGS_MESSAGE_OBJECTSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <smarp_msgs/objInfo.h>

namespace smarp_msgs
{
template <class ContainerAllocator>
struct objectStatus_
{
  typedef objectStatus_<ContainerAllocator> Type;

  objectStatus_()
    : no_objects(0)
    , objects()  {
    }
  objectStatus_(const ContainerAllocator& _alloc)
    : no_objects(0)
    , objects(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _no_objects_type;
  _no_objects_type no_objects;

   typedef std::vector< ::smarp_msgs::objInfo_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::smarp_msgs::objInfo_<ContainerAllocator> >> _objects_type;
  _objects_type objects;





  typedef boost::shared_ptr< ::smarp_msgs::objectStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::smarp_msgs::objectStatus_<ContainerAllocator> const> ConstPtr;

}; // struct objectStatus_

typedef ::smarp_msgs::objectStatus_<std::allocator<void> > objectStatus;

typedef boost::shared_ptr< ::smarp_msgs::objectStatus > objectStatusPtr;
typedef boost::shared_ptr< ::smarp_msgs::objectStatus const> objectStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::smarp_msgs::objectStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::smarp_msgs::objectStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::smarp_msgs::objectStatus_<ContainerAllocator1> & lhs, const ::smarp_msgs::objectStatus_<ContainerAllocator2> & rhs)
{
  return lhs.no_objects == rhs.no_objects &&
    lhs.objects == rhs.objects;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::smarp_msgs::objectStatus_<ContainerAllocator1> & lhs, const ::smarp_msgs::objectStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace smarp_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::smarp_msgs::objectStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::smarp_msgs::objectStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smarp_msgs::objectStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smarp_msgs::objectStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smarp_msgs::objectStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smarp_msgs::objectStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::smarp_msgs::objectStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5a23f44a8ec703483381fef35d218672";
  }

  static const char* value(const ::smarp_msgs::objectStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5a23f44a8ec70348ULL;
  static const uint64_t static_value2 = 0x3381fef35d218672ULL;
};

template<class ContainerAllocator>
struct DataType< ::smarp_msgs::objectStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "smarp_msgs/objectStatus";
  }

  static const char* value(const ::smarp_msgs::objectStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::smarp_msgs::objectStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 no_objects\n"
"objInfo[] objects\n"
"\n"
"================================================================================\n"
"MSG: smarp_msgs/objInfo\n"
"int32[]  deg\n"
"float32[] dist\n"
;
  }

  static const char* value(const ::smarp_msgs::objectStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::smarp_msgs::objectStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.no_objects);
      stream.next(m.objects);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct objectStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::smarp_msgs::objectStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::smarp_msgs::objectStatus_<ContainerAllocator>& v)
  {
    s << indent << "no_objects: ";
    Printer<int32_t>::stream(s, indent + "  ", v.no_objects);
    s << indent << "objects[]" << std::endl;
    for (size_t i = 0; i < v.objects.size(); ++i)
    {
      s << indent << "  objects[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::smarp_msgs::objInfo_<ContainerAllocator> >::stream(s, indent + "    ", v.objects[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SMARP_MSGS_MESSAGE_OBJECTSTATUS_H
