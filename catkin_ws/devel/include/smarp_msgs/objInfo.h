// Generated by gencpp from file smarp_msgs/objInfo.msg
// DO NOT EDIT!


#ifndef SMARP_MSGS_MESSAGE_OBJINFO_H
#define SMARP_MSGS_MESSAGE_OBJINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace smarp_msgs
{
template <class ContainerAllocator>
struct objInfo_
{
  typedef objInfo_<ContainerAllocator> Type;

  objInfo_()
    : deg()
    , dist()  {
    }
  objInfo_(const ContainerAllocator& _alloc)
    : deg(_alloc)
    , dist(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _deg_type;
  _deg_type deg;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _dist_type;
  _dist_type dist;





  typedef boost::shared_ptr< ::smarp_msgs::objInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::smarp_msgs::objInfo_<ContainerAllocator> const> ConstPtr;

}; // struct objInfo_

typedef ::smarp_msgs::objInfo_<std::allocator<void> > objInfo;

typedef boost::shared_ptr< ::smarp_msgs::objInfo > objInfoPtr;
typedef boost::shared_ptr< ::smarp_msgs::objInfo const> objInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::smarp_msgs::objInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::smarp_msgs::objInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::smarp_msgs::objInfo_<ContainerAllocator1> & lhs, const ::smarp_msgs::objInfo_<ContainerAllocator2> & rhs)
{
  return lhs.deg == rhs.deg &&
    lhs.dist == rhs.dist;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::smarp_msgs::objInfo_<ContainerAllocator1> & lhs, const ::smarp_msgs::objInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace smarp_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::smarp_msgs::objInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::smarp_msgs::objInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smarp_msgs::objInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smarp_msgs::objInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smarp_msgs::objInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smarp_msgs::objInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::smarp_msgs::objInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "85eca806c10fa7a6bdccc3a57dc0154a";
  }

  static const char* value(const ::smarp_msgs::objInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x85eca806c10fa7a6ULL;
  static const uint64_t static_value2 = 0xbdccc3a57dc0154aULL;
};

template<class ContainerAllocator>
struct DataType< ::smarp_msgs::objInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "smarp_msgs/objInfo";
  }

  static const char* value(const ::smarp_msgs::objInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::smarp_msgs::objInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[]  deg\n"
"float32[] dist\n"
;
  }

  static const char* value(const ::smarp_msgs::objInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::smarp_msgs::objInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.deg);
      stream.next(m.dist);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct objInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::smarp_msgs::objInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::smarp_msgs::objInfo_<ContainerAllocator>& v)
  {
    s << indent << "deg[]" << std::endl;
    for (size_t i = 0; i < v.deg.size(); ++i)
    {
      s << indent << "  deg[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.deg[i]);
    }
    s << indent << "dist[]" << std::endl;
    for (size_t i = 0; i < v.dist.size(); ++i)
    {
      s << indent << "  dist[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.dist[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SMARP_MSGS_MESSAGE_OBJINFO_H
