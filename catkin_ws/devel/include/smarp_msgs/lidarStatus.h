// Generated by gencpp from file smarp_msgs/lidarStatus.msg
// DO NOT EDIT!


#ifndef SMARP_MSGS_MESSAGE_LIDARSTATUS_H
#define SMARP_MSGS_MESSAGE_LIDARSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace smarp_msgs
{
template <class ContainerAllocator>
struct lidarStatus_
{
  typedef lidarStatus_<ContainerAllocator> Type;

  lidarStatus_()
    : range()
    , dist(0.0)  {
    }
  lidarStatus_(const ContainerAllocator& _alloc)
    : range(_alloc)
    , dist(0.0)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _range_type;
  _range_type range;

   typedef float _dist_type;
  _dist_type dist;





  typedef boost::shared_ptr< ::smarp_msgs::lidarStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::smarp_msgs::lidarStatus_<ContainerAllocator> const> ConstPtr;

}; // struct lidarStatus_

typedef ::smarp_msgs::lidarStatus_<std::allocator<void> > lidarStatus;

typedef boost::shared_ptr< ::smarp_msgs::lidarStatus > lidarStatusPtr;
typedef boost::shared_ptr< ::smarp_msgs::lidarStatus const> lidarStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::smarp_msgs::lidarStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::smarp_msgs::lidarStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::smarp_msgs::lidarStatus_<ContainerAllocator1> & lhs, const ::smarp_msgs::lidarStatus_<ContainerAllocator2> & rhs)
{
  return lhs.range == rhs.range &&
    lhs.dist == rhs.dist;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::smarp_msgs::lidarStatus_<ContainerAllocator1> & lhs, const ::smarp_msgs::lidarStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace smarp_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::smarp_msgs::lidarStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::smarp_msgs::lidarStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smarp_msgs::lidarStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smarp_msgs::lidarStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smarp_msgs::lidarStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smarp_msgs::lidarStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::smarp_msgs::lidarStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9851517ab1c233d16dff1313b91ad130";
  }

  static const char* value(const ::smarp_msgs::lidarStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9851517ab1c233d1ULL;
  static const uint64_t static_value2 = 0x6dff1313b91ad130ULL;
};

template<class ContainerAllocator>
struct DataType< ::smarp_msgs::lidarStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "smarp_msgs/lidarStatus";
  }

  static const char* value(const ::smarp_msgs::lidarStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::smarp_msgs::lidarStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[] range\n"
"float32 dist\n"
;
  }

  static const char* value(const ::smarp_msgs::lidarStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::smarp_msgs::lidarStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.range);
      stream.next(m.dist);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct lidarStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::smarp_msgs::lidarStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::smarp_msgs::lidarStatus_<ContainerAllocator>& v)
  {
    s << indent << "range[]" << std::endl;
    for (size_t i = 0; i < v.range.size(); ++i)
    {
      s << indent << "  range[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.range[i]);
    }
    s << indent << "dist: ";
    Printer<float>::stream(s, indent + "  ", v.dist);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SMARP_MSGS_MESSAGE_LIDARSTATUS_H
