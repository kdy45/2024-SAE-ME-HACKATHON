// Generated by gencpp from file smarp_msgs/recogObj.msg
// DO NOT EDIT!


#ifndef SMARP_MSGS_MESSAGE_RECOGOBJ_H
#define SMARP_MSGS_MESSAGE_RECOGOBJ_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace smarp_msgs
{
template <class ContainerAllocator>
struct recogObj_
{
  typedef recogObj_<ContainerAllocator> Type;

  recogObj_()
    : lines(false)
    , light(false)
    , stopline(false)
    , object(false)  {
    }
  recogObj_(const ContainerAllocator& _alloc)
    : lines(false)
    , light(false)
    , stopline(false)
    , object(false)  {
  (void)_alloc;
    }



   typedef uint8_t _lines_type;
  _lines_type lines;

   typedef uint8_t _light_type;
  _light_type light;

   typedef uint8_t _stopline_type;
  _stopline_type stopline;

   typedef uint8_t _object_type;
  _object_type object;





  typedef boost::shared_ptr< ::smarp_msgs::recogObj_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::smarp_msgs::recogObj_<ContainerAllocator> const> ConstPtr;

}; // struct recogObj_

typedef ::smarp_msgs::recogObj_<std::allocator<void> > recogObj;

typedef boost::shared_ptr< ::smarp_msgs::recogObj > recogObjPtr;
typedef boost::shared_ptr< ::smarp_msgs::recogObj const> recogObjConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::smarp_msgs::recogObj_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::smarp_msgs::recogObj_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::smarp_msgs::recogObj_<ContainerAllocator1> & lhs, const ::smarp_msgs::recogObj_<ContainerAllocator2> & rhs)
{
  return lhs.lines == rhs.lines &&
    lhs.light == rhs.light &&
    lhs.stopline == rhs.stopline &&
    lhs.object == rhs.object;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::smarp_msgs::recogObj_<ContainerAllocator1> & lhs, const ::smarp_msgs::recogObj_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace smarp_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::smarp_msgs::recogObj_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::smarp_msgs::recogObj_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smarp_msgs::recogObj_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smarp_msgs::recogObj_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smarp_msgs::recogObj_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smarp_msgs::recogObj_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::smarp_msgs::recogObj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4f3360b6f6ebe0d68e5b19307f35dc6c";
  }

  static const char* value(const ::smarp_msgs::recogObj_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4f3360b6f6ebe0d6ULL;
  static const uint64_t static_value2 = 0x8e5b19307f35dc6cULL;
};

template<class ContainerAllocator>
struct DataType< ::smarp_msgs::recogObj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "smarp_msgs/recogObj";
  }

  static const char* value(const ::smarp_msgs::recogObj_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::smarp_msgs::recogObj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool lines\n"
"bool light\n"
"bool stopline\n"
"bool object\n"
;
  }

  static const char* value(const ::smarp_msgs::recogObj_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::smarp_msgs::recogObj_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lines);
      stream.next(m.light);
      stream.next(m.stopline);
      stream.next(m.object);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct recogObj_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::smarp_msgs::recogObj_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::smarp_msgs::recogObj_<ContainerAllocator>& v)
  {
    s << indent << "lines: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lines);
    s << indent << "light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.light);
    s << indent << "stopline: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stopline);
    s << indent << "object: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.object);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SMARP_MSGS_MESSAGE_RECOGOBJ_H
